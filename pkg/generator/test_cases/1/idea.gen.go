// Code generated by nbtgen. DO NOT EDIT.

package main

import (
	"encoding/binary"
	"hash/fnv"

	"gitlab.com/kyle_anderson/nbt/pkg/nbt"
)

type TaskCompileCS struct {
	source, dest string
}

func NewTaskCompileC(
	source, dest string,
) nbt.Task {
	return &TaskCompileCS{
		source, dest,
	}
}

func (t *TaskCompileCS) Perform(h nbt.Handler) error {
	return TaskCompileC(
		h,
		t.source,
		t.dest,
	)
}

func (t *TaskCompileCS) Matches(other nbt.Task) bool {
	if t2, ok := other.(*TaskCompileCS); ok {
		return *t == *t2
	}
	return false
}

func (t *TaskCompileCS) Hash() uint64 {
	h := fnv.New64()
	binary.Write(h, binary.LittleEndian, hashBaseTaskCompileC)
	h.Write([]byte(t.source))
	h.Write([]byte(t.dest))
	return h.Sum64()
}

type TaskLinkProgramS struct{}

func NewTaskLinkProgram() nbt.Task {
	return &TaskLinkProgramS{}
}

func (t *TaskLinkProgramS) Perform(h nbt.Handler) error {
	return TaskLinkProgram(
		h,
	)
}

func (t *TaskLinkProgramS) Matches(other nbt.Task) bool {
	if t2, ok := other.(*TaskLinkProgramS); ok {
		return *t == *t2
	}
	return false
}

func (t *TaskLinkProgramS) Hash() uint64 {
	h := fnv.New64()
	binary.Write(h, binary.LittleEndian, hashBaseTaskLinkProgram)
	return h.Sum64()
}
